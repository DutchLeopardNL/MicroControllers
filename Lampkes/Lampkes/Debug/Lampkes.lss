
Lampkes.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001be  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090b  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000083f  00000000  00000000  00000b63  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000394  00000000  00000000  000013a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001738  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f9  00000000  00000000  0000176c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e2  00000000  00000000  00001b65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	13 d0       	rcall	.+38     	; 0xc0 <main>
  9a:	65 c0       	rjmp	.+202    	; 0x166 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <wait>:
				clock value is set. This is used by _delay_ms inside
				util/delay.h
Version :    	DMK, Initial code
*******************************************************************/
{
	for (int i=0; i<ms; i++)
  9e:	18 16       	cp	r1, r24
  a0:	19 06       	cpc	r1, r25
  a2:	6c f4       	brge	.+26     	; 0xbe <wait+0x20>
  a4:	20 e0       	ldi	r18, 0x00	; 0
  a6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	e9 ef       	ldi	r30, 0xF9	; 249
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	31 97       	sbiw	r30, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <wait+0xe>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <wait+0x14>
  b2:	00 00       	nop
  b4:	2f 5f       	subi	r18, 0xFF	; 255
  b6:	3f 4f       	sbci	r19, 0xFF	; 255
  b8:	82 17       	cp	r24, r18
  ba:	93 07       	cpc	r25, r19
  bc:	a9 f7       	brne	.-22     	; 0xa8 <wait+0xa>
  be:	08 95       	ret

000000c0 <main>:
notes:			Looping forever, flipping bits on PORTD
Version :    	DMK, Initial code
*******************************************************************/
{
	
	DDRA = 0b11111111;	
  c0:	8f ef       	ldi	r24, 0xFF	; 255
  c2:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0b11111111;	
  c4:	87 bb       	out	0x17, r24	; 23
	DDRC = 0b11111111;	
  c6:	84 bb       	out	0x14, r24	; 20
	DDRD = 0b11111111;
  c8:	81 bb       	out	0x11, r24	; 17
	DDRE = 0b11111111;
  ca:	82 b9       	out	0x02, r24	; 2
	DDRF = 0b11111111;
  cc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
	DDRG = 0b11111111;			// All pins PORTD are set to output 
  d0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	
	PORTA = 0x00;
  d4:	1b ba       	out	0x1b, r1	; 27
	PORTB = 0x00;
  d6:	18 ba       	out	0x18, r1	; 24
	PORTC = 0x00;
  d8:	15 ba       	out	0x15, r1	; 21
	PORTD = 0x00;
  da:	12 ba       	out	0x12, r1	; 18
	PORTE = 0x00;
  dc:	13 b8       	out	0x03, r1	; 3
	PORTF = 0x00;
  de:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__TEXT_REGION_LENGTH__+0x7e0062>
	PORTG = 0x00;
  e2:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
	DDRD = 0b11111111;
  e6:	81 bb       	out	0x11, r24	; 17
	DDRC = 0b11111111;
  e8:	84 bb       	out	0x14, r24	; 20
	DDRC = 0b00000000;
  ea:	14 ba       	out	0x14, r1	; 20
	DDRB = 0b00000000;
  ec:	17 ba       	out	0x17, r1	; 23
	PORTD &= ~BIT(7);
  ee:	97 98       	cbi	0x12, 7	; 18
	PORTD &= ~BIT(7);
  f0:	97 98       	cbi	0x12, 7	; 18



	int state = 0;
  f2:	c0 e0       	ldi	r28, 0x00	; 0
  f4:	d0 e0       	ldi	r29, 0x00	; 0
	while (1){
		

	if (PINC & 1)
	{
		state = 1;
  f6:	ff 24       	eor	r15, r15
  f8:	f3 94       	inc	r15
  fa:	00 e0       	ldi	r16, 0x00	; 0
	}
	if (PINB & 1){
		state = 2;	
	}
	if (!(PINB & 1) && !(PINC & 1)){
		state = 0;
  fc:	b1 2c       	mov	r11, r1
  fe:	c1 2c       	mov	r12, r1
			PORTD ^= BIT(0);
			wait(1000);
			break;
			case 2:
		
			PORTC ^= BIT(0);
 100:	11 e0       	ldi	r17, 0x01	; 1
				wait(1000);
			break;
 102:	68 94       	set
 104:	dd 24       	eor	r13, r13
 106:	d1 f8       	bld	r13, 1
 108:	e1 2c       	mov	r14, r1

	int state = 0;
	while (1){
		

	if (PINC & 1)
 10a:	98 9b       	sbis	0x13, 0	; 19
 10c:	02 c0       	rjmp	.+4      	; 0x112 <main+0x52>
	{
		state = 1;
 10e:	cf 2d       	mov	r28, r15
 110:	d0 2f       	mov	r29, r16
	}
	if (PINB & 1){
 112:	b0 99       	sbic	0x16, 0	; 22
 114:	23 c0       	rjmp	.+70     	; 0x15c <main+0x9c>
		state = 2;	
	}
	if (!(PINB & 1) && !(PINC & 1)){
 116:	b0 99       	sbic	0x16, 0	; 22
 118:	02 c0       	rjmp	.+4      	; 0x11e <main+0x5e>
 11a:	98 9b       	sbis	0x13, 0	; 19
 11c:	17 c0       	rjmp	.+46     	; 0x14c <main+0x8c>
		state = 0;
	}
		
		switch (state){
 11e:	c1 30       	cpi	r28, 0x01	; 1
 120:	d1 05       	cpc	r29, r1
 122:	21 f0       	breq	.+8      	; 0x12c <main+0x6c>
 124:	c2 30       	cpi	r28, 0x02	; 2
 126:	d1 05       	cpc	r29, r1
 128:	b1 f4       	brne	.+44     	; 0x156 <main+0x96>
 12a:	07 c0       	rjmp	.+14     	; 0x13a <main+0x7a>
			case 1:
			
			PORTD ^= BIT(0);
 12c:	82 b3       	in	r24, 0x12	; 18
 12e:	81 27       	eor	r24, r17
 130:	82 bb       	out	0x12, r24	; 18
			wait(1000);
 132:	88 ee       	ldi	r24, 0xE8	; 232
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	b3 df       	rcall	.-154    	; 0x9e <wait>
			break;
 138:	e8 cf       	rjmp	.-48     	; 0x10a <main+0x4a>
			case 2:
		
			PORTC ^= BIT(0);
 13a:	85 b3       	in	r24, 0x15	; 21
 13c:	81 27       	eor	r24, r17
 13e:	85 bb       	out	0x15, r24	; 21
				wait(1000);
 140:	88 ee       	ldi	r24, 0xE8	; 232
 142:	93 e0       	ldi	r25, 0x03	; 3
 144:	ac df       	rcall	.-168    	; 0x9e <wait>
			break;
 146:	cd 2d       	mov	r28, r13
 148:	de 2d       	mov	r29, r14
 14a:	df cf       	rjmp	.-66     	; 0x10a <main+0x4a>
	}
	if (PINB & 1){
		state = 2;	
	}
	if (!(PINB & 1) && !(PINC & 1)){
		state = 0;
 14c:	cb 2d       	mov	r28, r11
 14e:	dc 2d       	mov	r29, r12
 150:	02 c0       	rjmp	.+4      	; 0x156 <main+0x96>
 152:	cb 2d       	mov	r28, r11
 154:	dc 2d       	mov	r29, r12
		
			PORTC ^= BIT(0);
				wait(1000);
			break;
			default:
			PORTD = 0b00000000;
 156:	12 ba       	out	0x12, r1	; 18
			PORTC = 0b00000000;
 158:	15 ba       	out	0x15, r1	; 21
			break;
 15a:	d7 cf       	rjmp	.-82     	; 0x10a <main+0x4a>
		state = 1;
	}
	if (PINB & 1){
		state = 2;	
	}
	if (!(PINB & 1) && !(PINC & 1)){
 15c:	b0 99       	sbic	0x16, 0	; 22
 15e:	ed cf       	rjmp	.-38     	; 0x13a <main+0x7a>
 160:	98 9b       	sbis	0x13, 0	; 19
 162:	f7 cf       	rjmp	.-18     	; 0x152 <main+0x92>
 164:	ea cf       	rjmp	.-44     	; 0x13a <main+0x7a>

00000166 <_exit>:
 166:	f8 94       	cli

00000168 <__stop_program>:
 168:	ff cf       	rjmp	.-2      	; 0x168 <__stop_program>
